{"version":3,"file":"static/js/884.78b6c6d6.chunk.js","mappings":"8SAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAY,SAAAC,GACvB,OAAOF,EAAAA,EAAAA,IAAA,iBAAoBE,EAApB,4BAA+CH,GACvD,EAEYI,EAAmB,mCAAG,8FACpBH,EAAAA,EAAAA,IAAA,uCAA0CD,IADtB,mFAAH,qDAInBK,EAAe,SAAAF,GAC1B,OAAOF,EAAAA,EAAAA,IAAA,iBAAoBE,EAApB,4BAA+CH,GACvD,EAEYM,EAAc,SAAAH,GACzB,OAAOF,EAAAA,EAAAA,IAAA,iBAAoBE,EAApB,oBAAuCH,GAC/C,EAEYO,EAAmB,mCAAG,WAAOC,GAAP,0FAAcC,EAAd,+BAAqB,EAArB,SACpBR,EAAAA,EAAAA,IAAA,gCACcD,EADd,kBAC+BQ,EAD/B,iBAC6CC,EAD7C,iBADoB,mFAAH,qD,gHC0EhC,UAzFqB,WAAO,IAAD,IACjBN,GAAYO,EAAAA,EAAAA,MAAZP,QACR,GAAwCQ,EAAAA,EAAAA,YAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,MAE3DC,EAAAA,EAAAA,YAAU,WACRP,GAAW,GACX,IAAMQ,GAASnB,EAAAA,EAAAA,IAAYH,GAW3B,OAVAsB,EACGC,MAAK,SAAAC,GACJd,EAAgBc,EAAIC,MACpBX,GAAW,EACZ,IACAY,OAAM,SAAAf,GACLgB,QAAQhB,MAAM,gCAAiCA,GAC/CC,GAAS,GACTE,GAAW,EACZ,IACI,WACLQ,EAAOM,QACR,CACF,GAAE,CAAC5B,IAEJ,IAAQ6B,EACNpB,EADMoB,MAAOC,EACbrB,EADaqB,SAAUC,EACvBtB,EADuBsB,YAAaC,EACpCvB,EADoCuB,aAAcC,EAClDxB,EADkDwB,aAAcC,EAChEzB,EADgEyB,OAE5DC,EAAOH,EAAeA,EAAaI,MAAM,KAAK,GAAK,IACnDC,EAAYJ,EAAeK,KAAKC,MAAqB,GAAfN,GAAqB,IAC3DO,EAAYN,EAASA,EAAOO,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,OAAS,IAEzE,OACE,4BACE,SAAC,KAAD,CAASC,GAAI5B,EAAoB6B,QAAjC,UACE,mBAAQC,KAAK,SAASC,UAAWC,EAAAA,EAAAA,SAAjC,SAA+C,cAKhDpC,GACC,SAAC,IAAD,KAEA,4BACE,4BACE,gBACEqC,IACEnB,EAAW,6CAC+BA,GACtCoB,EAENC,MAAO,IACPC,IAAI,YAEN,4BACE,yBACGxB,EAAM,KAAGM,EAAK,QAEjB,yBAAG,eAAaE,EAAU,QAE1B,uBAAI,cACJ,uBAAIP,KAEJ,4BACE,uBAAI,aACJ,uBAAIU,UAED,QAGT,4BACE,uBAAG,6BACH,2BACE,yBACE,SAAC,KAAD,CAASK,GAAG,OAAZ,SAAmB,YAErB,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,SAAsB,qBAI5B,SAAC,KAAD,OAGHlC,IAAS,uBAAG,eAGlB,C","sources":["Api.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'b736543dbc75e71c808e6920558bf547';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchCast = movieId => {\n  return axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n};\n\nexport const fetchTrendingMovies = async () => {\n  return await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\n};\n\nexport const fetchReviews = movieId => {\n  return axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n};\n\nexport const movieDetail = movieId => {\n  return axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n};\n\nexport const fetchOnSearchParams = async (query, page = 1) => {\n  return await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&page=${page}&per_page=20`\n  );\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { NavLink, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { movieDetail } from '../Api';\nimport css from '../index.module.css';\nimport Loader from '../components/Loader';\nimport defaultImg from '../img/no image available.jpg';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState();\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    setLoading(true);\n    const source = movieDetail(movieId);\n    source\n      .then(res => {\n        setMovieDetails(res.data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching movie details:', error);\n        setError(true);\n        setLoading(false);\n      });\n    return () => {\n      source.cancel();\n    };\n  }, [movieId]);\n\n  const { title, overview, poster_path, release_date, vote_average, genres } =\n    movieDetails;\n  const year = release_date ? release_date.split('-')[0] : '-';\n  const userScore = vote_average ? Math.round(vote_average * 10) : '-';\n  const genresAll = genres ? genres.map(genre => genre.name).join(' | ') : '-';\n\n  return (\n    <div>\n      <NavLink to={backLinkLocationRef.current}>\n        <button type=\"button\" className={css.back_btn}>\n          Go back\n        </button>\n      </NavLink>\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div>\n          <div>\n            <img\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/original${poster_path}`\n                  : defaultImg\n              }\n              width={250}\n              alt=\"poster\"\n            />\n            <div>\n              <p>\n                {title} ({year})\n              </p>\n              <p>User score: {userScore}%</p>\n\n              <p>{'Overview'}</p>\n              <p>{overview}</p>\n\n              <div>\n                <p>{'Genres:'}</p>\n                <p>{genresAll}</p>\n              </div>\n            </div>{' '}\n          </div>\n\n          <div>\n            <p>Additional information:</p>\n            <ul>\n              <li>\n                <NavLink to=\"cast\">Cast</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"reviews\">Reviews</NavLink>\n              </li>\n            </ul>\n          </div>\n          <Outlet />\n        </div>\n      )}\n      {error && <p>Error...</p>}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["API_KEY","axios","fetchCast","movieId","fetchTrendingMovies","fetchReviews","movieDetail","fetchOnSearchParams","query","page","useParams","useState","movieDetails","setMovieDetails","error","setError","loading","setLoading","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","source","then","res","data","catch","console","cancel","title","overview","poster_path","release_date","vote_average","genres","year","split","userScore","Math","round","genresAll","map","genre","name","join","to","current","type","className","css","src","defaultImg","width","alt"],"sourceRoot":""}